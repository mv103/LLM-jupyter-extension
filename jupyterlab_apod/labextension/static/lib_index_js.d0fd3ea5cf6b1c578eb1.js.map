{"version":3,"file":"lib_index_js.d0fd3ea5cf6b1c578eb1.js","mappings":"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","sources":["webpack://jupyterlab_apod/./src/button.ts","webpack://jupyterlab_apod/./src/index.ts"],"sourcesContent":["// we are making a lab extension which means it is seen on the front end, \n//   as well as a server extension that runs using an API on back end\n\n// import {ToolbarButton} from \"@jupyterlab/apputils\";\n import {DocumentRegistry} from \"@jupyterlab/docregistry\"; \n import {INotebookModel, NotebookPanel} from \"@jupyterlab/notebook\";\n// import { NotebookActions } from '@jupyterlab/notebook';\n import {IDisposable} from \"@lumino/disposable\";\n\n//import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ToolbarButton } from '@jupyterlab/apputils';\n//import { NotebookActions } from '@jupyterlab/notebook'; // cur\n//import { Cell } from '@jupyterlab/cells';\n//import { ICellModel } from '@jupyterlab/cells/lib/model';\n//import { Widget } from '@lumino/widgets';\n//import { IWidgetExtension } from '@jupyterlab/nbformat';\n//import { NotebookActions, Notebook } from '@jupyterlab/notebook';\n\n// export class ButtonExtension implements IWidgetExtension<Widget, ICellModel> {\n// current sol\n// export class ButtonExtension implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel> {\n    \n//   private notebook: NotebookPanel;\n\n//   constructor(notebook: NotebookPanel) {\n//     console.log(\"initialize ButtonExtension called\");\n//     this.notebook = notebook;\n//   }\n\n//   createNew(panel: NotebookPanel, context: DocumentRegistry.IContext<INotebookModel>): IDisposable { // change idispos to tool\n      \n//     console.log(\"createNew called\");\n//     let mybutton = new ToolbarButton({\n//       label: 'My Button',\n        \n//       onClick: () =>  {\n//         console.log(\"createNew func is called\");\n//         console.log(NotebookPanel);\n//         console.log(NotebookActions);\n//         console.log(this.notebook);\n//         // NotebookActions.insertBelow(this.notebook.content);\n//         // NotebookActions.selectBelow(cell);\n//       }\n//       // tooltip: 'Insert new cell below'\n//     });\n      \n//     // Add the toolbar button to the notebook\n//     panel.toolbar.addItem('mybutton', mybutton);\n//     console.log(\"added to tollbar\");\n      \n//     return mybutton;\n//   }\n// }\n\n// yt sol\nexport class ButtonExtension implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel> {\n    \n    createNew(panel: NotebookPanel, context: DocumentRegistry.IContext<INotebookModel>): IDisposable {\n        const extensionHtml = `<!DOCTYPE html>\n        <html>\n          <head>\n            <script>\n                async function apiCall() {\n                    // this is to take input as the prompt (from \"error\")\n                    let userQuestion = document.getElementById('error');\n                    let promptInput = userQuestion.value;\n                    \n                    const body = {\n                        'prompt': promptInput,\n                        'max_tokens': 500,\n                        'temperature': 1,\n                        'frequency_penalty': 0,\n                        'presence_penalty': 0,\n                        'top_p': 0.5,\n                        'stop': null\n                    };\n                    const response = await fetch('https://inferenceendpointeastus.openai.azure.com/openai/deployments/athena-code-davinci-002/completions?api-version=2022-06-01-preview', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'api-key': '417c5d059f2d47aca2bb66c8122083ec'\n                        },\n                        body: JSON.stringify(body)\n                    }).then(response => response.json());\n                    \n                    console.log(body.prompt)\n                    console.log(response.choices[0])\n                    console.log(response.choices[0].text)\n                    \n                    \n                    // this is to output the prompt response\n                    let outputText = document.getElementById('output');\n                    outputText.innerHTML = response.choices[0].text;\n                }\n            </script>\n            <style>\n                body {\n                    background-color: #EEEEEE;\n                    \n                }\n                form {\n                    width: 50%;\n                    float: left;\n                    text-align: center;\n                }\n                label {\n                    text-align: left;\n                }\n                #debug-btn {\n                    text-align: right;\n                }\n                #output-container {\n                    width: 40%;\n                    float: right;\n                    margin-right: 5%;\n                    border-left: 1px solid #ccc;\n                    padding-left: 20px;\n                }\n                .content {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100vh;\n                }\n                label {\n                    color: #3A98B9;\n                }\n            </style>\n          </head>\n          <body>\n            <div class=\"content\">\n                <form>\n                  <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSaj9dNpEdibBy5XUs3YcWRiNR8WsO_1J6yl8VJ-rQ&s\" alt=\"cat\">\n                  <br>\n                  <textarea rows=\"10\" cols=\"50\" id=\"code\"></textarea>\n                  <br>\n                  <label for=\"code\">Input your code snippet</label>\n                  <br>\n                  <br>\n                  <textarea rows=\"10\" cols=\"50\" id=\"error\"></textarea>\n                  <br>\n                  <label for=\"error\">Ask your question</label>\n                  <br>\n                  <br>\n                  <input type=\"button\" id=\"debug-btn\" value=\"Debug\" onclick=\"apiCall()\">\n                </form>\n                <div id=\"output-container\">\n                    <p id=\"output\"></p>\n                </div>\n            </div>\n          </body>\n        </html>`;\n\n    const extensionUrl = URL.createObjectURL(\n    new Blob([extensionHtml], { type: \"text/html\" }));\n   \n    let mybutton = new ToolbarButton({\n        label: 'LLM Buggy',\n        onClick: () => window.open(extensionUrl, \"win\", \"width=500,height=500\"), \n        tooltip: 'Open LLM Buggy Extension'\n    });\n\n//       // create the toolbar button\n//         let mybutton = new ToolbarButton({\n//             label: 'My Button', \n//             onClick: () => alert('you did it')\n//                 // Get the current active notebook widget\n//                 // let notebook = app.shell.currentWidget?.content;\n\n//                 // Create a new code cell and select it\n//                 // NotebookActions.insertBelow(notebook);\n//                 // NotebookActions.selectBelow(notebook);\n//         });\n        \n        // Add the toolbar button to the notebook\n        panel.toolbar.insertItem(9, 'mybutton', mybutton);\n        \n        // the ToolBarButton class implements 'IDisposable', so the button *is* the extension for the purpose of this method\n        return mybutton;\n   }\n}\n\n//another chat sol\n// export function createButton(app: JupyterFrontEnd): ToolbarButton {\n//   let button = new ToolbarButton({\n//     iconClassName: 'fa fa-plus-square',\n//     onClick: () => {\n//       // Get the current active notebook widget\n//       let notebook = app.shell.currentWidget?.content;\n\n//       // Create a new code cell and select it\n//       NotebookActions.insertBelow(notebook);\n//       NotebookActions.selectBelow(notebook);\n//     },\n//     tooltip: 'Insert new cell below'\n//   });\n//   return button;","// import {\n//   ILayoutRestorer,\n//   JupyterFrontEnd,\n//   JupyterFrontEndPlugin\n// } from '@jupyterlab/application';\n\n// import {\n//   ICommandPalette,\n//   MainAreaWidget,\n//   WidgetTracker\n// } from '@jupyterlab/apputils';\n\n// interface APODResponse {\n//   copyright: string;\n//   date: string;\n//   explanation: string;\n//   media_type: 'video' | 'image';\n//   title: string;\n//   url: string;\n// };\n\n// class APODWidget extends Widget {\n//   /**\n//   * Construct a new APOD widget.\n//   */\n//   constructor() {\n//     super();\n\n//     this.addClass('my-apodWidget');\n\n//     // Add an image element to the panel\n//     this.img = document.createElement('img');\n//     this.node.appendChild(this.img);\n\n//     // Add a summary element to the panel\n//     this.summary = document.createElement('p');\n//     this.node.appendChild(this.summary);\n//   }\n\n//   /**\n//   * The image element associated with the widget.\n//   */\n//   readonly img: HTMLImageElement;\n\n//   /**\n//   * The summary text element associated with the widget.\n//   */\n//   readonly summary: HTMLParagraphElement;\n\n//   /**\n//   * Handle update requests for the widget.\n//   */\n//   async updateAPODImage(): Promise<void> {\n\n//     const response = await fetch(`https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=${this.randomDate()}`);\n\n//     if (!response.ok) {\n//       const data = await response.json();\n//       if (data.error) {\n//         this.summary.innerText = data.error.message;\n//       } else {\n//         this.summary.innerText = response.statusText;\n//       }\n//       return;\n//     }\n\n//     const data = await response.json() as APODResponse;\n\n//     if (data.media_type === 'image') {\n//       // Populate the image\n//       this.img.src = data.url;\n//       this.img.title = data.title;\n//       this.summary.innerText = data.title;\n//       if (data.copyright) {\n//         this.summary.innerText += ` (Copyright ${data.copyright})`;\n//       }\n//     } else {\n//       this.summary.innerText = 'Random APOD fetched was not an image.';\n//     }\n//   }\n\n//   /**\n//   * Get a random date string in YYYY-MM-DD format.\n//   */\n//   randomDate(): string {\n//     const start = new Date(2010, 1, 1);\n//     const end = new Date();\n//     const randomDate = new Date(start.getTime() + Math.random()*(end.getTime() - start.getTime()));\n//     return randomDate.toISOString().slice(0, 10);\n//   }\n// }\n\n// /**\n// * Activate the APOD widget extension.\n// */\n// function activate(app: JupyterFrontEnd, palette: ICommandPalette, restorer: ILayoutRestorer | null) {\n//   console.log('JupyterLab extension jupyterlab_apod is activated!');\n\n//   // Declare a widget variable\n//   let widget: MainAreaWidget<APODWidget>;\n\n//   // Add an application command\n//   const command: string = 'apod:open';\n//   app.commands.addCommand(command, {\n//     label: 'Random Astronomy Picture',\n//     execute: () => {\n//       if (!widget || widget.isDisposed) {\n//         const content = new APODWidget();  \n//         widget = new MainAreaWidget({content});\n//         widget.id = 'apod-jupyterlab';\n//         widget.title.label = 'Astronomy Picture';\n//         widget.title.closable = true;\n//       }\n//       if (!tracker.has(widget)) {\n//         // Track the state of the widget for later restoration\n//         tracker.add(widget);\n//       }\n//       if (!widget.isAttached) {\n//         // Attach the widget to the main work area if it's not there\n//         app.shell.add(widget, 'main');\n//       }\n//       widget.content.updateAPODImage();\n\n//       // Activate the widget\n//       app.shell.activateById(widget.id);\n        \n//       // const current = notebookTracker.currentWidget;\n//       // const notebook = current.content;\n//       // notebook.activeCellIndex = 0;\n//       // NotebookActions.insertAbove(notebook);\n//     }\n//   });\n\n//   // Add the command to the palette.\n//   palette.addItem({ command, category: 'Tutorial' });\n\n//   // Track and restore the widget state\n//   let tracker = new WidgetTracker<MainAreaWidget<APODWidget>>({\n//     namespace: 'apod'\n//   });\n//   if (restorer) {\n//     restorer.restore(tracker, {\n//       command,\n//       name: () => 'apod'\n//     });\n//   }\n// }\n\n// /**\n//  * Initialization data for the jupyterlab_apod extension.\n//  */\n// const plugin: JupyterFrontEndPlugin<void> = {\n//   id: 'jupyterlab-apod',\n//   autoStart: true,\n//   requires: [ICommandPalette],\n//   optional: [ILayoutRestorer],\n//   activate: activate\n// };\n\n// export default plugin;\n\nimport {\n    JupyterFrontEnd, JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\n//import {ToolbarButton} from \"@jupyterlab/apputils\";\n//import {INotebookModel, NotebookPanel} from \"@jupyterlab/notebook\"; // cur\n//import { NotebookActions } from '@jupyterlab/notebook';\n//import { Notebook } from '@jupyterlab/notebook';\n//import { DocumentRegistry } from '@jupyterlab/docregistry'; //cur\n\nimport {ButtonExtension} from \"./button\";\n\n/** \n * Initialization data for the mybutton extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n    id: 'mybutton',\n    autoStart: true,\n    activate: (app: JupyterFrontEnd) => {\n        console.log('JupyterLab extension mybutton is activated!');\n        \n        let buttonExtension = new ButtonExtension();\n        app.docRegistry.addWidgetExtension('Notebook', buttonExtension);\n    }\n};\n\n// const extension: JupyterFrontEndPlugin<void> = {\n//     id: 'mybutton',\n//     autoStart: true,\n//     activate: (app: JupyterFrontEnd) => {\n//         console.log('JupyterLab extension mybutton is activated!');\n//         app.docRegistry.addWidgetExtension('Notebook', {\n//             createNew: (panel: NotebookPanel, context: DocumentRegistry.IContext<INotebookModel>) => {\n//                 // let buttonExtension = new ButtonExtension(panel); \n//                 // panel.toolbar.addItem('myButton', buttonExtension.toolbarButton);\n//                 var button = new ButtonExtension(panel);\n//                \n//             }\n//         });\n//     }\n// };\n\nexport default extension; \n"],"names":[],"sourceRoot":""}